apiVersion: v1
kind: Namespace
metadata:
  name: storagetest-${NAME}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: claim-${NAME}
  namespace: storagetest-${NAME}
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: bulk
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: storagetest-${NAME}
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      initContainers:
        - name: echo
          image: nginx
          command: ['sh', '-c', "echo ${NAME} > /usr/share/nginx/html/index.html"]
          volumeMounts:
          - mountPath: "/usr/share/nginx/html"
            name: site-volume
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 80
              name: rest
              protocol: TCP
          volumeMounts:
          - mountPath: "/usr/share/nginx/html"
            name: site-volume
      volumes:
        - name: site-volume
          persistentVolumeClaim:
            claimName: claim-${NAME}
---
apiVersion: v1
kind: Service
metadata:
  name: nginxapp
  namespace: storagetest-${NAME}
spec:
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginxapp
  namespace: storagetest-${NAME}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

spec:
  rules:
  - host: ${NAME}.poc01.dplpoc.reload.dk
    http:
      paths:
      - path: /
        pathType: 'Prefix'
        backend:
          service:
            name: nginxapp
            port:
              number: 80
  tls:
  - hosts:
    - ${NAME}.poc01.dplpoc.reload.dk
    secretName: tls-production
